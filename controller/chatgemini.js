const axios = require('axios');

const handleChat = async (req, res) => {
  const { message, context } = req.body;

  try {
    // Cr√©ation du prompt √† envoyer √† Gemini
    const prompt = `
Tu es un assistant intelligent. Donne-moi la r√©ponse au format JSON strict uniquement, sans texte autour.
Format attendu :
{
  "reply": "Ta r√©ponse ici",
  "results": [ ... ]
}

Question utilisateur : ${message}
`;

    // Appel √† l'API Gemini
    const response = await axios.post(
      'https://generativelanguage.googleapis.com/v1/models/gemini-1.5-pro:generateContent?key=' + process.env.CHATGEMI_key,
      {
        contents: [
          {
            role: 'user',
            parts: [{ text: prompt }],
          },
        ],
      }
    );

    // Affichage de la r√©ponse de l'API apr√®s l'appel
    console.log("R√©ponse de l'API:", response.data); // Affiche les donn√©es de la r√©ponse

    // R√©cup√©ration de la r√©ponse du chatbot
    let botReply = response.data.candidates[0].content.parts[0].text;

    // üîß Nettoyage de la r√©ponse pour enlever les balises markdown comme ```json et ```
    botReply = botReply.replace(/```json\n?/g, '').replace(/```/g, '').trim();

    let jsonReply;
    try {
      // Tentative de parsing de la r√©ponse nettoy√©e en JSON
      jsonReply = JSON.parse(botReply);
    } catch (parseError) {
      console.error("‚ùå Erreur lors du parsing JSON :", parseError.message);
      return res.status(500).json({ reply: botReply, error: "La r√©ponse n‚Äô√©tait pas un JSON valide m√™me apr√®s nettoyage." });
    }

    // Envoi de la r√©ponse format√©e correctement
    res.json(jsonReply);

  } catch (error) {
    console.error('üî• ERREUR D√âTAILL√âE GEMINI üî•', error.response?.data || error.message);

    // Envoi d'une erreur serveur en cas de probl√®me avec l'API Gemini
    res.status(500).json({ error: 'Erreur lors de la communication avec Gemini.' });
  }
};

module.exports = { handleChat };
